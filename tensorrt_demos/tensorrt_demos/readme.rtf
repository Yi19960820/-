{\rtf1\ansi\ansicpg936\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset134 PingFangSC-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red129\green95\blue3;
\red170\green13\blue145;\red0\green0\blue0;\red28\green70\blue74;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c50580\c37140\c1210;
\csgenericrgb\c66500\c5200\c56900;\cssrgb\c0\c0\c0;\csgenericrgb\c10981\c27276\c28869;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \

\f1\fs28 \cf4 1.\cf2  
\f2 \'b0\'b2\'d7\'b0pycuda
\f0\fs24 \
\

\f1\fs28    ```
\f0\fs24 \cf5 shell\cf2 \

\f1\fs28    
\f0\fs24 \cf5 $ cd $\{HOME\}/project/tensorrt_demos/ssd\cf2 \

\f1\fs28    
\f0\fs24 \cf5 $ ./install_pycuda.sh\cf2 \

\f1\fs28    
\f0\fs24 \cf5 ```\cf2 \
\

\f1\fs28 \cf4 2.\cf2  
\f2 \'b0\'b2\'d7\'b0
\f1 onnx
\f0\fs24 \
\

\f1\fs28    ```
\f0\fs24 \cf5 shell\cf2 \

\f1\fs28    
\f0\fs24 \cf5 $ sudo pip3 install onnx==1.4.1\cf2 \

\f1\fs28    
\f0\fs24 \cf5 ```\cf2 \
\

\f1\fs28 \cf4 3.\cf2  
\f2 \'cf\'c2\'d4\'d8
\f1 yolov3
\f2 \'cf\'e0\'b9\'d8\'c4\'a3\'d0\'cd\'a3\'ac\'bd\'a8\'d2\'e9\'ca\'b9\'d3\'c3\'b0\'d9\'b6\'c8\'d4\'c6\'b5\'c8\'b9\'fa\'c4\'da\'d7\'ca\'d4\'b4\'cf\'c2\'d4\'d8\'a1\'a3\'c8\'e7\'b9\'fb\'d7\'d4\'bc\'ba\'cf\'c2\'d4\'d8\'b5\'c4\'bb\'b0\'a3\'ac\'be\'cd\'b2\'bb\'d3\'c3\'c4\'c7\'b8\'f6
\f0\fs24 \cf6 download_yolov3.sh
\f2 \'c1\'cb\'a3\'ac\'b0\'d1\'c4\'a3\'d0\'cd\'b7\'c5\'d4\'da\'d5\'e2\'b8\'f6\'ce\'c4\'bc\'fe\'bc\'d0\'c0\'ef\'be\'cd\'ba\'c3\'a1\'a3
\fs28 \cf2 \'d6\'a7\'b3\'d6\'b5\'c4\'c4\'a3\'d0\'cd
\f1 : 'yolov3-tiny-288', 'yolov3-tiny-416',  'yolov3-288', 'yolov3-416', and 'yolov3-608'.  
\f0\fs24 \
\

\f1\fs28    
\f2 \'cf\'c2\'c3\'e6\'ca\'c7
\f1 yolov3-416
\f2 \'b5\'c4\'c0\'fd\'d7\'d3
\f0\fs24 \
\

\f1\fs28    ```
\f0\fs24 \cf5 shell\cf2 \

\f1\fs28    
\f0\fs24 \cf5 $ cd $\{HOME\}/project/tensorrt_demos/yolov3_onnx\cf2 \

\f1\fs28    
\f0\fs24 \cf5 $ ./download_yolov3.sh\cf2 \

\f1\fs28    
\f0\fs24 \cf5 $ python3 yolov3_to_onnx.py --model yolov3-416\cf2 \

\f1\fs28    
\f0\fs24 \cf5 $ python3 onnx_to_tensorrt.py --model yolov3-416\cf2 \

\f1\fs28    
\f0\fs24 \cf5 ```\cf2 \
\

\f1\fs28    The last step ('onnx_to_tensorrt.py') takes a little bit more than half au hour to complete on my Jetson Nano DevKit.  When that is done, the optimized TensorRT engine would be saved as 'yolov3-416.trt'.
\f0\fs24 \
\

\f1\fs28 \cf4 4.\cf2  
\f2 \'bc\'ec\'b2\'e2\'d2\'bb\'d5\'c5\'cd\'bc\'c6\'ac
\f0\fs24 \
\

\f1\fs28    ```
\f0\fs24 \cf5 shell\cf2 \

\f1\fs28    
\f0\fs24 \cf5 $ wget https://raw.githubusercontent.com/pjreddie/darknet/master/data/dog.jpg -O $\{HOME\}/Pictures/dog.jpg\cf2 \

\f1\fs28    
\f0\fs24 \cf5 $ python3 trt_yolov3.py --model yolov3-416\cf2 \

\f1\fs28    
\f0\fs24 \cf5                         --image --filename $\{HOME\}/Pictures/dog.jpg\cf2 \

\f1\fs28    
\f0\fs24 \cf5 ```\cf2 \
5.
\f2 \'bc\'ec\'b2\'e2\'ca\'d3\'c6\'b5
\f0 /
\f2 \'cd\'bc\'c6\'ac
\f0 /USB
\f2 \'ca\'d3\'c6\'b5
\f0 /IP
\f2 \'ca\'d3\'c6\'b5\'a1\'a3\'be\'df\'cc\'e5\'b5\'c4\'b2\'ce\'ca\'fd\'bf\'c9\'d2\'d4\'b2\'ce\'bf\'bcutils/camera.py
\f0 \

\f1\fs28  \cf4 *\cf2  \cf4 `
\f0\fs26 \cf7 --file --filename test_video.mp4
\f1\fs28 \cf4 `\cf2 : a video file, e.g. mp4 or ts.
\f0\fs24 \

\f1\fs28    \cf4 *\cf2  \cf4 `
\f0\fs26 \cf7 --image --filename test_image.jpg
\f1\fs28 \cf4 `\cf2 : an image file, e.g. jpg or png.
\f0\fs24 \

\f1\fs28    \cf4 *\cf2  \cf4 `
\f0\fs26 \cf7 --usb --vid 0
\f1\fs28 \cf4 `\cf2 : USB webcam (/dev/video0).
\f0\fs24 \

\f1\fs28    \cf4 *\cf2  \cf4 `
\f0\fs26 \cf7 --rtsp --uri rtsp://admin:123456@192.168.1.1/live.sdp
\f1\fs28 \cf4 `\cf2 : RTSP source, e.g. an IP cam.}